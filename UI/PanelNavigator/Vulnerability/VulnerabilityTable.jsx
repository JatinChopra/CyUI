import React, { useEffect, useState } from "react";
import axios from "axios";

import { useSelector, useDispatch } from "react-redux";
import { setVulnerabilityData } from "./slices/vulnerabilitiesSlice";

import { Box, Button, TextField, Typography } from "@mui/material";

import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import TablePagination from "@mui/material/TablePagination";
import { GoDotFill } from "react-icons/go";
import MessageOutlinedIcon from "@mui/icons-material/MessageOutlined";

const tabs = ["All", "New", "Triage", "Duplicate", "Retest", "Resolve", "Bin"];
const severityColors = {
  Low: "bg-green-500",
  Medium: "bg-green-700",
  High: "bg-[#EC8830]",
  Critical: "bg-[#CE3733]",
};

const statusColors = {
  New: "text-[#058AA6]",
  Triage: "text-[#E32273]",
  Duplicate: "text-[#EFD237]",
  Informative: "text-[#9F9B9B]",
  Resolve: "text-[#B2C615]",
  Retest: "text-[#46F655]",
  "not Applicable": "text-[#FF0700]",
  "Won't Fix": "text-[#FF0700]",
};

const VulnerabilityTable = () => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(9);
  const data = useSelector((state) => state.vulnerabilities);
  const [filteredData, setFilteredData] = useState([]);
  const selectedTab = useSelector((state) => state.tabs);
  let filterItems = useSelector((state) => state.filters);
  const searchText = useSelector((state) => state.search);

  const dispatch = useDispatch();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          "./UI/PanelNavigator/Vulnerability/data.json"
        );
        console.log(response.data);

        dispatch(setVulnerabilityData(response.data));
        setFilteredData(response.data);
        console.log("data fetched");
      } catch (e) {
        console.log("Error fetching json data", e.message);
      }
    };

    fetchData();
  }, [dispatch]);

  useEffect(() => {
    console.log("useeffect triggred");
    let filtered = data.filter((item) => {
      let index = tabs.findIndex((tab) => item.status == tab);
      if (selectedTab === 0) {
        console.log(selectedTab, ": ", index);
        return true;
      } else {
        console.log(selectedTab, ": ", index);
        return selectedTab === index;
      }
    });

    if (!filterItems) {
      filterItems = [];
    }
    console.log("Here borther ", filterItems);
    if (filterItems.length > 0 && selectedTab === 0) {
      console.log("Here borther ", filterItems);
      filtered = data.filter((item) => {
        console.log("filterOP : ", item.status, " : ");
        console.log(filterItems.includes(item.status));
        return filterItems.includes(item.status);
      });
    }

    if (searchText.length > 0) {
      console.log(
        "got search Text (searching every vulnerability ): ",
        searchText
      );

      filtered = data.filter((item) => {
        console.log("> lets see ", item.vulnerabilityName, " : ", searchText);
        console.log(item.vulnerabilityName.toLowerCase().includes(searchText));
        return item.vulnerabilityName.toLowerCase().includes(searchText);
      });
    }

    setFilteredData(filtered);
  }, [selectedTab, filterItems, searchText]);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  return (
    <>
      <TableContainer component={Paper} className="h-[750px] bg-[#282D31]">
        <Table
          sx={{ minWidth: 650 }}
          aria-label="simple table"
          className="bg-custom-two"
        >
          <TableHead className="bg-[#37393D] text-white">
            <TableRow className="text-white">
              <TableCell className="text-white font-semibold text-lg">
                Status
              </TableCell>
              <TableCell className="text-white font-semibold text-lg">
                Vulnerability
              </TableCell>
              <TableCell className="text-white font-semibold text-lg">
                Type
              </TableCell>
              <TableCell className="text-white font-semibold text-lg  w-[150px]">
                Severity
              </TableCell>
              <TableCell className="text-white font-semibold text-lg w-[90px]">
                CVSS Score
              </TableCell>
              <TableCell className="text-white font-semibold text-lg w-[150px]">
                CVE / CWE
              </TableCell>
              <TableCell className="text-white font-semibold text-lg w-[200px]">
                Persons
              </TableCell>
              <TableCell className="text-white font-semibold text-lg">
                Created On
              </TableCell>
              <TableCell className="text-white font-semibold text-lg">
                Chat
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredData
              .slice(page * rowsPerPage, (page + 1) * rowsPerPage)
              .map((item, index) => {
                let {
                  status,
                  vulnerabilityName,
                  type,
                  severity,
                  cvssScore,
                  cveCweNumber,
                  persons,
                  dateCreatedOn,
                  newMessages,
                } = item;

                const severityBgColorClass = severityColors[severity];
                const statusBgColorClass = statusColors[status];

                return (
                  <TableRow key={index}>
                    <TableCell className="text-white text-base ">
                      <div className="flex">
                        <GoDotFill
                          className={
                            " mt-[-4px]  mr-1 text-3xl " + statusBgColorClass
                          }
                        />
                        {status}
                      </div>
                    </TableCell>
                    <TableCell className="text-white font-medium text-md">
                      {vulnerabilityName}
                    </TableCell>

                    <TableCell className="text-white">
                      <Box className="bg-[#404246] py-1 flex justify-center rounded-md pt-2 font-bold">
                        {type}
                      </Box>
                    </TableCell>

                    <TableCell className="text-white">
                      <Box
                        className={
                          "  py-1 flex justify-center rounded-md pt-2 font-bold w-[90px] " +
                          severityBgColorClass
                        }
                      >
                        {severity}
                      </Box>
                    </TableCell>

                    <TableCell className="text-white">{cvssScore}</TableCell>

                    <TableCell className="text-white">
                      {" "}
                      <Box className="bg-[#404246] py-1 flex justify-center rounded-md pt-2 font-bold w-[90px]">
                        {cveCweNumber}
                      </Box>
                    </TableCell>

                    <TableCell style={{}} className="text-white pb-14 ">
                      <Box className="relative">
                        {persons.map((item, index) => (
                          <img
                            key={index}
                            src={"https://picsum.photos/100"}
                            className="h-10 w-10 rounded-full absolute top-0 border-solid border-[4px] border-[#282D31]"
                            style={{ zIndex: 5 - index, left: 20 * index }}
                          />
                        ))}
                      </Box>
                    </TableCell>

                    <TableCell className="text-white">
                      {dateCreatedOn}
                    </TableCell>

                    <TableCell className="text-white">
                      {newMessages === true ? (
                        <>
                          <MessageOutlinedIcon className="mb-2" />
                          <GoDotFill className="text-green-500 mt-[-38px] ml-[12px] text-xl" />
                        </>
                      ) : (
                        <>
                          <MessageOutlinedIcon className="mb-2" />
                        </>
                      )}
                    </TableCell>
                  </TableRow>
                );
              })}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        className={"bg-[#37393D] text-white flex justify-center"}
        sx={{
          color: "white",
          "& .MuiSelect-icon": {
            color: "white",
            // marginRight: "10px",
          },
        }}
        rowsPerPageOptions={[9]}
        component="div"
        count={filteredData.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </>
  );
};

export default VulnerabilityTable;
